# For DevOps in GitLab
#
# Generate a key pair either on your host
# - Add the private key to the variable $SSH_PRIVATE_KEY_STAGING
# - Add the public key to the staging host in ~/.ssh/authorized_keys
#
# Provide the following Variables in GitLab in Settings > CI / CD
# - $SSH_PRIVATE_KEY_STAGING
# - $HOST_STAGING
# - $USER_HOST_STAGING
# - $WORKING_DIR_STAGING

stages:
  - deploy

deploy_staging:
  stage: deploy
  image: jaromirpufler/docker-openssh-client
  only:
    refs:
      - develop
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY_STAGING" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa

    - ssh-keyscan $HOST_STAGING >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script: |
    ssh $USER_HOST_STAGING "
      cd $WORKING_DIR_STAGING
      git fetch
      git checkout $CI_COMMIT_SHORT_SHA
      make staging
    "
